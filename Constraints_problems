
1. Randomize the below variable such as 

class randvar; 
rand bit [7:0] var1, var2, var3, var4; 
endclass 

i) Randomize all variable. 
ii) Randomize only var2. 
iii) Randomize var1, var4. 
iv) Randomize var1, var3, var4.

/////////////////////////////////////////////////////////////////////////////////

i)
module test;
  randvar r;
    initial begin
      r = new();
      r.randomize();
    end
endmodule

/////////////////////////////////////////////////////////////////////////////////

ii)
module test;
  randvar r;
    initial begin
      r = new();
      r.randomize(r.var2);
    end
endmodule

/////////////////////////////////////////////////////////////////////////////////

iii) 
module test;
  randvar r;
    initial begin
      r = new();
      r.randomize(r.var1, r.var4);
    end
endmodule

/////////////////////////////////////////////////////////////////////////////////

iv) 
module test;
  randvar r;
    initial begin
      r = new();
      r.randomize(r.var1, r.var3, r.var4);
    end
endmodule

*----------------------------------------------------------------------------------------------------------------------------------------*

2. Whats wrong with below constraint. Write the constraint? 
Class const; 
rand bit [7:0] low, mid, high; 
constraint Const_1 {low <mid<high;} 
end class

Class const; 
rand bit [7:0] low, mid, high; 
constraint Const_1 {low <mid;}
constraint Const_2 {mid < high;}
end class

*----------------------------------------------------------------------------------------------------------------------------------------*

3. Write a single constraint to generate random values for bit [8:0] variable in the below range:
1–34, 127, 129–156, 192–202, 257–260.

class const;
  rand bit [8:0] var;
  constraint c1 { 
    var inside {[1:34], 127, [129:156], [192:202], [257:260];}
  }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

4. Write a constraint without an inside function to generate random values within the range of 34 to 43?

class const;
  rand bit [6:0] var;
  constraint c1 { 
    var >= 34 && var <= 43;
  }
endclass
*----------------------------------------------------------------------------------------------------------------------------------------*

5. Write a constraint to generate a random value for a var1 [7:0] within 50 and var2 [7:0] with the non-repeated value in every randomization?
class const;
  rand bit [7:0] var1;
  randc bit [7:0] var2;
  constraint c1 {
    var1 inside {[0:50]};
    var2 inside {[0:50]};
    }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

6. Without using randomization method or rand keyword (modifiers), generate an array of unique values.
class const;
  int unsigned arr[];
  function void build_arr(int size);
  arr = new(size);
  for (int i=0; i<size; i++)
    begin
      arr[i] = i;
    end
  arr.shuffle();
  endfunction
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

7. Generate unique elements in an array without using the keyword unique.
class const;
  rand int arr[];
  constraint c1 {
    arr.size() inside {[0:5]};
    foreach(arr[i]) {
        foreach(arr[j]) {
            if (i!=j)
              arr[i] != arr[j]; 
        }
      }
    }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

8. Write a constraint to generate 0, 1, x, z randomly.

class const;
  rand logic val;
  constraint c1 {
    val inside {1'b0, 1'b1, 1'bx, 1'bz};
  }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

9. Write a constraint to generate of power 2.
class packet;
  int arr[];
  rand int size;
  rand bit [5:0] var1;
  
  constraint c1 {
    size inside {[1:6]};
  }

  function void post_randomize();
    arr = new[size];
    foreach(arr[i])
        if (i == 0)
          arr[i] = 1;
        else
          arr[i] = arr[i-1] << 1;
  endfunction
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

10. Having a 32-bit variable, only single-bit high values need to be accessed. Write a constraint for that.
class const;
  rand logic [31:0] var;
  constraint c1 {
    $countones(var) == 1;
    }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

11. Write a constraint with array size 5 to 10 values & the array values should be in ascending order/descending order.
class const;
  rand int arr[];
  rand [4:0] var;

  constraint c1 {
    arr.size() inside {[5:10]};
    foreach(a[i]) {
        if (i>0)
          a[i] > a[i-1];
    }
  }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

12. Write a constraint to generate a pattern 0102030405.
class const;
  int arr[10];
  constraint c1 {
    foreach(a[i]) 
      {
        arr[i] == i%2 == 0 ? 0: (i+1)/2;
      }
  }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

13. Constraint to generate pattern 0, 2, 1, 3, 4, 6, 5, 7, 8.

*----------------------------------------------------------------------------------------------------------------------------------------*

14. Constraint to generate unique numbers between 99 to 100.
class const;
  int arr[2];
  constraint c1 {
      arr[0] inside {[99:100]};
      arr[1] inside {[99:100]};
      arr[0] != arr[1];
    }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

15. Write a constraint – divisible by 5.
class const;
  rand int var;
  constraint c1 {
      var % 5 == 0;
    }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

16. Derive odd numbers within the range of 10 to 30 using SystemVerilog constraint.
class const;
  rand int var;
  constraint c1 {
    var inside {[10:30]};
    var % 2 != 0;
  }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

17. Write a constraint to generate prime numbers between the range of 1 to 100.
class const;
  rand int var;
  constraint c1 {
    var inside {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,87,89,97};
    }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

18. What is circular dependency and how to avoid this problem?
A circular dependency happens when two or more design elements depend on each other in a loop, creating a dependency cycle.
class c;
  rand int a, b;
  constraint c1 { a == b + 1; }
  constraint c2 { b == a - 1; } // a depends on b, b depends on a → circular
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

19. Write a constraint in such a way that for read transaction 30% time and for write transaction 70% time.
class const;
  type def enum {READ, WRITE} state_ty;
  rand state_ty trans;
  constraint c1 {
    trans dist { READ := 30, WRITE := 70};
  }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

20. Write a class that randomizes an integer x between 0 and 100.
class const;
  rand int x;
  constraint c1 { x inside {[0:100]}; }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

21. Constrain x to be even and a multiple of 4.
class const;
  rand int x;
  constraint c1 { x%4 == 0;}
endclass
                  
*----------------------------------------------------------------------------------------------------------------------------------------*

22. Generate a 3D vector [3][3][3] with values between -10 and 10.
class const;
  rand int arr[3][3][3];
  constraint c1 { foreach(arr[i][j][k])
                    arr[i][j][k] inside {[-10:10]};
                }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

23. Ensure total sum of 3D vector is greater than zero.
class const;
  rand int arr[3][3][3];
  constraint c1 { foreach(arr[i,j,k]) arr[i][j][k] inside {[-10:10]};
                  }
  function int sum_array();
    int total = 0;
    foreach (arr[i,j,k])
      total += arr[i][j][k];
    return total;
  endfunction

  constraint c2 { sum_array() > 0; }
endclass
    
*----------------------------------------------------------------------------------------------------------------------------------------*

24. Randomize a deck of 52 cards ensuring uniqueness.
class const;
  rand int deck[52];
  constraint c1 { 
                  foreach(deck[i])
                    deck[i] inside {[0:51]};
                  foreach (deck[i])
                    foreach (deck[j])
                      if(i!=j)
                        deck[i] != deck[j];
      }
endclass
                  
*----------------------------------------------------------------------------------------------------------------------------------------*

25. Generate student scores (5 subjects) such that average > 60.
class const;
  rand int math, chem, phy, bio, eng;
  constraint c1 {
                  math inside {[0:100]};
                  chem inside {[0:100]};
                  phy inside {[0:100]};
                  bio inside {[0:100]};
                  eng inside {[0:100]};
                }
  constraint c2 {
          ((math + chem + phy + bio + eng)/5) > 60;
    }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

26. Model a transaction with type (deposit/withdraw) and amount (100-10,000).
tyedef enum {DEPOSIT, WITHDRAW}state_ty;
class const;
  rand state_ty type;
  rand int unsigned amount;
  rand int unsigned deposit_amount;
  constraint c1 {
    amount inside {[100:10000]};
  }
  constraint c2 {
    if(type == WITHDRAW)
      amount <= deposit_amount;
  }
endclass

*----------------------------------------------------------------------------------------------------------------------------------------*

27. Randomize a dice value from 1 to 6.
class const;
  rand int dice;
  constraint c1{ dice inside {[1:6]}; }
endclass
*----------------------------------------------------------------------------------------------------------------------------------------*

Create a temperature sensor class where temp ranges -40 to 125ºC.
*----------------------------------------------------------------------------------------------------------------------------------------*

Create a vector of 10 IDs with all unique values.
*----------------------------------------------------------------------------------------------------------------------------------------*

Constrain a 4-bit vector to have exactly 2 bits set.
*----------------------------------------------------------------------------------------------------------------------------------------*

Generate random hh:mm:ss where hh<24, mm<60, ss<60.
*----------------------------------------------------------------------------------------------------------------------------------------*

Generate a traffic light state duration such that total = 180s.
*----------------------------------------------------------------------------------------------------------------------------------------*

Randomize dimensions of a square (side 5–20), constrain area > 100.
*----------------------------------------------------------------------------------------------------------------------------------------*

Generate a binary tree node with key (50–200), left < root < right.
*----------------------------------------------------------------------------------------------------------------------------------------*

Ensure 3 student roll numbers are all different.
*----------------------------------------------------------------------------------------------------------------------------------------*

Generate a packet with addr, data, id ensuring addr % 4 == 0.
*----------------------------------------------------------------------------------------------------------------------------------------*

Create random IP address with each byte between 0–255.
*----------------------------------------------------------------------------------------------------------------------------------------*

Randomize a 4-digit pin such that it doesn’t contain repeated digits.
*----------------------------------------------------------------------------------------------------------------------------------------*

Create a random MAC address with valid formatting (6 bytes, each 0–255).
*----------------------------------------------------------------------------------------------------------------------------------------*
























