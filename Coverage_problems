
1. Cover all values of a random variable between 0 and 100.

covergroup a_range;
  coverpoint a {
    bins all_vals[] = {[0:100]};
  }
endgroup;

*------------------------------------------------------------------------------------------------------------------------------------------*

2. Cover even, odd, and multiple-of-10 numbers for a 0–100 range.
covergroup a_range;
  coverpoint a{
    bins a_even[]    = {[0:100]} with (item %2 ==0);
    bins a_odd[]     = {[0:100]} with (item%2 !=0);
    bins a_mul10[]   = {[0:100]} with (item%10 == 0);
  }
endgroup

*------------------------------------------------------------------------------------------------------------------------------------------*

3. Cover each card in a 52-card deck.

typdef enum {SPADE, HEART, DIAMOND, CLUB} suit_t;

class card;
  suit_t suit;
  rand int unsigned rank;
  constraint c1 { rank inside {[1:13]}; }
endclass

covergroup card_range;
  coverpoint rank { bins ranks[] = {[1:13]} ; }
  coverpoint suit;

  cross rank, suit;
endgroup

*------------------------------------------------------------------------------------------------------------------------------------------*

4. Cover student scores in bins: 0–50, 51–75, 76–100.

class const;
  rand int scores;
  covergroup rang;
    coverpoint scores {
      bins sc1 = {[0:50]};
      bins sc2 = {[51:75]};
      bins sc3 = {[76:100]};
    }
  endgroup
endclass

*------------------------------------------------------------------------------------------------------------------------------------------*

5. Cover all transaction types and amount ranges.

typdef enum {READ, WRITE, UPDATE, DELETE} txn_ty;

class transaction;
  rand txn_ty t1;
  rand int amount;

covergroup g1;
  coverpoint t1;
  coverpoint amount {
    bins1 = {[0:50]};
    bins2 = {[51:100]};
    bins3 = {[101:150]};
  }
cross t1, amount;
endgroup

*------------------------------------------------------------------------------------------------------------------------------------------*

6. Cover dice values from 1 to 6 uniformly.
class const;
  rand int dice;
  constraint c1 { dice inside [1,2,3,4,5,6];}

covergroup c12;
  coverpoint dice[] = {[1:6]};
endgroup

endclass

*------------------------------------------------------------------------------------------------------------------------------------------*

7. Cover traffic light durations: green (30–60), yellow (5–10), red (50–90).

class const;
  rand int green, yellow, red;
  covergroup traffic;
    coverpoint green {
      bins g[] = {[30:60]};
    }
    coverpoint yellow {
      bins y[] = {[5:10]};
    }
    coverpoint red {
      bins r[] = {[50:90]};
    }
  endgroup
endclass
*------------------------------------------------------------------------------------------------------------------------------------------*

8. Cover temperature sensor readings in 5 bins.
  class const;
    rand int temp;
    constraint c1 { temp inside {[0:100]}; }
    covergroup c12 @(posedge clk);
      coverpoint temp { 
        bins very_low = {[0:20]};
        bins low = {[21:40]};
        bins med = {[41:60]};
        bins high = {[61:80]};
        bins very_high = {[81:100]};
        }
    endgroup
  endclass
*------------------------------------------------------------------------------------------------------------------------------------------*

9. Cover different lengths of burst transactions: 1, 2, 4, 8, 16.
class const;
  rand int burst_len;

  constraint c1 {
    burst_len inside {1,2,4,8,16};
  }

covergroup burst;
  coverpoint burst_len {
    bins len_1 = {1};
    bins len_2 = {2};
    bins len_4 = {4};
    bins len_8 = {8};
    bins len_16 = {16};
  }
  endgroup

endclass
*------------------------------------------------------------------------------------------------------------------------------------------*

10. Cover all combinations of signal A (0/1) and signal B (0/1).
class const;
  logic sig_a, sig_b;
  covergroup signal;
    coverpoint sig_a {
      bins a1[] = {0,1};
      }
    coverpoint sig_b {
      bins b1[] = {0,1};
      }
    cross sig_a, sig_b;
  endgroup
endclass
*------------------------------------------------------------------------------------------------------------------------------------------*

11. Cover fsm_state transitions.
class const;
  typedef enum {S1,S2,S3,S4}state_ty;
  rand state_ty state, next_state;

  covergroup s;
    coverpoint state {
      bins state_1[] = {S1,S2,S3,S4};
    }
    coverpoint next_state {
      bins next_state_1[] = {S1,S2,S3,S4};
    }
    cross state, next_state;
  endgroup
endclass
*------------------------------------------------------------------------------------------------------------------------------------------*


12. Cover id field values from 0 to 15 in a packet.
*------------------------------------------------------------------------------------------------------------------------------------------*


13. Cover binary vector values with even number of 1s.
*------------------------------------------------------------------------------------------------------------------------------------------*


14. Cover all valid IP address ranges (first byte: 10, 172, 192).
*------------------------------------------------------------------------------------------------------------------------------------------*


15. Cover valid and invalid packet types.
*------------------------------------------------------------------------------------------------------------------------------------------*

16. Cover timing delays: 0–1, 2–4, 5–10 cycles.
*------------------------------------------------------------------------------------------------------------------------------------------*


17. Cover all priority levels in arbiter (e.g., 0–3).
*------------------------------------------------------------------------------------------------------------------------------------------*


18. Cover addr value bins in low, mid, high address spaces.
*------------------------------------------------------------------------------------------------------------------------------------------*

19. Cover temperature crossing thresholds: <0, 0–25, 25–50, >50.
*------------------------------------------------------------------------------------------------------------------------------------------*


20. Cover all combinations of protocol flags (QoS, prot, lock, cache).
*------------------------------------------------------------------------------------------------------------------------------------------*

